breaks = c("Ni11", "Ni12", "Ni21", "Ni22"),
values = c("olivedrab1","aquamarine4","coral", "mediumvioletred"))
ggplot()+
geom_line(aes(y=Ni11, x=lambda, colour="Ni11"), size=1)+
geom_line(aes(y=Ni12, x=lambda, colour="Ni12"), size=1)+
geom_line(aes(y=Ni21, x=lambda, colour="Ni21"), size=1)+
geom_line(aes(y=Ni22, x=lambda, colour="Ni22"), size=1)+
xlim(0,1.3)+ylim(0,3)+theme_minimal()+
xlab("lambda")+
theme(axis.title.x = element_text(size=11))+
ylab(expression(N[i]))+
theme(axis.title.y = element_text(size=11))+
ggtitle("Graf_3")+
theme(plot.title = element_text(size=13, face="bold"))+
scale_colour_manual("",
breaks = c("Ni11", "Ni12", "Ni21", "Ni22"),
values = c("olivedrab1","aquamarine4","coral", "mediumvioletred"))
ggplot()+
geom_line(aes(y=Ni11, x=lambda, colour="Ni11"), size=1)+
geom_line(aes(y=Ni12, x=lambda, colour="Ni12"), size=1)+
geom_line(aes(y=Ni21, x=lambda, colour="Ni21"), size=1)+
geom_line(aes(y=Ni22, x=lambda, colour="Ni22"), size=1)+
xlim(0,1.3)+ylim(0,3)+theme_minimal()+
xlab("lambda")+
theme(axis.title.x = element_text(size=11))+
ylab(expression(N[i]))+
theme(axis.title.y = element_text(size=11))+
ggtitle("Graf_3")+
theme(plot.title = element_text(size=13, face="bold"))+
scale_colour_manual("",
breaks = c("Ni11", "Ni12", "Ni21", "Ni22"),
values = c("mediumvioletred","aquamarine4","coral", "olivedrab1"))
ggplot()+
geom_line(aes(y=Ni11, x=lambda, colour="Ni11"), size=1)+
geom_line(aes(y=Ni12, x=lambda, colour="Ni12"), size=1)+
geom_line(aes(y=Ni21, x=lambda, colour="Ni21"), size=1)+
geom_line(aes(y=Ni22, x=lambda, colour="Ni22"), size=1)+
xlim(0,1.3)+ylim(0,3)+theme_minimal()+
xlab("lambda")+
theme(axis.title.x = element_text(size=11))+
ylab(expression(N[i]))+
theme(axis.title.y = element_text(size=11))+
ggtitle("Graf_3")+
theme(plot.title = element_text(size=13, face="bold"))+
scale_colour_manual("",
breaks = c("Ni11", "Ni12", "Ni21", "Ni22"),
values = c("indianred3","aquamarine4","coral", "olivedrab1"))
ggplot()+
geom_line(aes(y=lambda1,x=PL, colour="lambda1"), size=1)+
geom_line(aes(y=lambda2,x=PL, colour="lambda2"), size=1)+
xlim(0,1)+ylim(0,6)+theme_minimal()+
xlab(expression(P[L]))+
theme(axis.title.x = element_text(size=11))+
ylab("lambda")+
theme(axis.title.y = element_text(size=11))+
ggtitle("Graf_2")+
theme(plot.title = element_text(size=13, face="bold"))+
scale_colour_manual("",
breaks = c("lambda1", "lambda2"),
values = c("darkgreen", "olivedrab1"))
ggplot()+
geom_line(aes(y=lambdaL,x=PL), colour="lambdaL", size=1)+
geom_line(aes(y=lambdaT,x=PL), colour="lambdaT", size=1)+
geom_line(aes(x=PL,y=lambda0), colour="lambda0", size=1)+
xlim(0,1)+ylim(0,75)+theme_minimal()+
xlab(expression(P[L]))+
theme(axis.title.x = element_text(size=11))+
ylab("Maximal test arrival rate")+
theme(axis.title.y = element_text(size=11))+
ggtitle("Graf_1")+
theme(plot.title = element_text(size=13, face="bold"))+
scale_colour_manual("",
breaks = c("lambdaL", "lambdaT", "lambda0"),
values = c("darkslateblue", "goldenrod2", "firebrick1"))
ggplot()+
geom_line(aes(y=lambdaL,x=PL, colour="lambdaL"), size=1)+
geom_line(aes(y=lambdaT,x=PL, colour="lambdaT"), size=1)+
geom_line(aes(x=PL,y=lambda0, colour="lambda0"), size=1)+
xlim(0,1)+ylim(0,75)+theme_minimal()+
xlab(expression(P[L]))+
theme(axis.title.x = element_text(size=11))+
ylab("Maximal test arrival rate")+
theme(axis.title.y = element_text(size=11))+
ggtitle("Graf_1")+
theme(plot.title = element_text(size=13, face="bold"))+
scale_colour_manual("",
breaks = c("lambdaL", "lambdaT", "lambda0"),
values = c("darkslateblue", "goldenrod2", "firebrick1"))
PL <- seq(0,1,0.1)
F <- .6*10^9
miL <- 1/(0.5*10^9)
lambdaL <- ((miL)*F)/PL
miD <- 1/(10^6)
R<- 4*10^6
lambdaT <- ((miD)*R)/(1-PL)
K <- 10
F0 <- 45*10^9
lambda0 <- ((miL)*F0)/(10*(1-PL))
ggplot()+
geom_line(aes(y=lambdaL,x=PL, colour="lambdaL"), size=1)+
geom_line(aes(y=lambdaT,x=PL, colour="lambdaT"), size=1)+
geom_line(aes(x=PL,y=lambda0, colour="lambda0"), size=1)+
xlim(0,1)+ylim(0,75)+theme_minimal()+
xlab(expression(P[L]))+
theme(axis.title.x = element_text(size=11))+
ylab("Maximal test arrival rate")+
theme(axis.title.y = element_text(size=11))+
ggtitle("Graf_1")+
theme(plot.title = element_text(size=13, face="bold"))+
scale_colour_manual("",
breaks = c("lambdaL", "lambdaT", "lambda0"),
values = c("darkslateblue", "goldenrod2", "firebrick1"))
install.packages("shiny")
library(shiny)
plot(cars)
x = cars$speed
plot(x)
x = cars$dist
plot(x)
x <- rnorm(10)
plot(x)
plot(x, type=l)
plot(x, type="l")
x <- c(1:10)
plot(x)
x <- c(1,10, by=0,8)
plot(x)
x <- c(1,10, by=0,5)
plot(x)
x <- c(1:10, by=0,5)
plot(x)
x <- seq(1,10, by=0,5)
x <- seq(1,10, by=0.5)
plot(x)
x <- seq(1,10, by=0.3)
plot(x)
x <- seq(1,10, by=2)
x <- seq(1,10, by=2)
plot(x)
knitr::opts_chunk$set(echo = TRUE)
require("ggplot2")
require("markdown")
require("knitr")
require("plotrix")
set.seed(666)
plot(x, type="l")
x <- seq(3,27,3)
plot(x)
x <- seq(3,27,1)
plot(x)
x <- seq(3,27,2)
plot(x)
x <- cars
plot(x)
plot(x, type="l")
plot(x)
x <- cars$dist
plot(x)
plot(x, type="l")
x1 <- seq(0,300,5)
y1 <- seq(0,800, 200)
x1 <- seq(0,400,50)
plot(x1,y1)
x <- seq(0,400,50)
y <- seq(0,800, 200)
plot(x1,y1)
plot(x,y)
plot(x)
y <- seq(0,400, 200)
plot(x)
plot(x,y)
y <- seq(0,400, by = 200)
x <- seq(0,400, by=50)
plot(x,y)
plot(y)
x <- rnorm(400)
y <- rnorm(400)
plot(x,y)
x <- abs(rnorm(400))
y <- abs(rnorm(400))
plot(x,y)
plot(x, y, col(x = "blue"))
plot(x, y, col="blue")
plot(x, y, col(x)="blue")
plot(x, y, col[x]="blue")
plot(x col="blue")
plot(x, col="blue")
plot(y, col = "red")
a <- plot(x, col="blue")
b <- plot(y, col = "red")
plot(a,b)
x <- abs(rnorm(400))
y <- abs(rnorm(400))
plot(x,y)
plot(x,y, type="l")
y <- rnomr(400,0,1)*x
plot(x,y, type="l")
x <- abs(rnorm(400))
y <- rnorm(400,0,1)*x
plot(x,y, type="l")
plot(x,y, type="b")
plot(x,y, type="p")
y <- abs(rnorm(400,0,1))*x
plot(x,y, type="p")
y <- abs(rnorm(400,0,1))+lag(y)
plot(x,y, type="p")
x <- abs(rnorm(400))
y <- abs(rnorm(400,0,1))+lag(y)
plot(x,y, type="p")
x <- seq(0,50,1)
y <- x*2
plot(x,y, type="p")
y <- rnorm(50)*x
y <- rnorm(51)*x
plot(x,y, type="p")
y <- abs(rnorm(51))*x
x <- seq(0,50,1)
y <- abs(rnorm(51))*x
plot(x,y, type="p")
y <- abs(rnorm(2))*x
plot(x,y, type="p")
y <- x/10
plot(x,y, type="p")
y <- 1/x
plot(x,y, type="p")
y <- log(x)
plot(x,y, type="p")
y <- -log(x)
plot(x,y, type="p")
x <- seq(0,50,1)
y <- 1/x
plot(x,y, type="p")
plot(x,y, type="p")
plot(x,y, type="p")
plot(x,y, type="l")
plot(x,y, type="b")
plot(x,y, type="o")
plot(x,y, type="c")
plot(x,y, type="h")
plot(x,y, type="n")
plot(x = seq(0,50,1), y=1/x, type="types",
#main=input$region,
ylab="Number of Telephones",
xlab="Year")
plot(x = seq(0,50,1), y=1/x, #type="types",
#main=input$region,
ylab="Number of Telephones",
xlab="Year")
plot(x = seq(0,50,1), y=1/x, #type="types",
#main=input$region,
)
plot(x = seq(0,50,1), y=1/x, #type="types",
#main=input$region,
ylab="y",
xlab="x")
plot(x,y, type="o")
library(shiny)
ui <- fluidPage(
titlePanel("Choose a type:"),
sidebarLayout(
sidebarPanel(
selectInput("types", choices=c("p", "l", "b", "o", "h", "n")),
hr(),
helpText("p for points", "l for lines", "b for points and lines", "o for points joined by lines",
"h for histogram", "n for nothing")),
mainPanel(
plotOutput("Plot")
)
)
)
server <- function(input, output){
output$Plot <- renderPlot({
plot(x = seq(0,50,1), y=1/x, type=input$types,
main=input$types,
ylab="y",
xlab="x")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("Choose a type:"),
sidebarLayout(
sidebarPanel(
selectInput("types", choices=c("p", "l", "b", "o", "h", "n")),
hr(),
helpText("p for points", "l for lines", "b for points and lines", "o for points joined by lines",
"h for histogram", "n for nothing")),
mainPanel(
plotOutput("Plot")
)
)
)
ui <- fluidPage(
titlePanel("Choose a type:"),
sidebarLayout(
sidebarPanel(
selectInput("types", "Typy:", choices=c("p", "l", "b", "o", "h", "n")),
hr(),
helpText("p for points", "l for lines", "b for points and lines", "o for points joined by lines",
"h for histogram", "n for nothing")),
mainPanel(
plotOutput("Plot")
)
)
)
server <- function(input, output){
output$Plot <- renderPlot({
plot(x = seq(0,50,1), y=1/x, type=input$types,
main=input$types,
ylab="y",
xlab="x")
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Choose a type:"),
sidebarLayout(
sidebarPanel(
selectInput("types", "Typy:", choices=c("p", "l", "b", "o", "h", "n")),
hr(),
helpText(""p"" for points, ", ""l" for lines, ", ""b" for points and lines, ", ""o" for points joined by lines, ",
""h" for histogram, ", ""n" for nothing.")),
mainPanel(
plotOutput("Plot")
)
)
)
server <- function(input, output){
output$Plot <- renderPlot({
plot(x = seq(0,50,1), y=1/x, type=input$types,
main=input$types,
ylab="y",
xlab="x")
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Choose a type:"),
sidebarLayout(
sidebarPanel(
selectInput("types", "Types:", choices=c("p", "l", "b", "o", "h", "n")),
hr(),
helpText(""p"" for points, ", ""l" for lines, ", ""b" for points and lines, ", ""o" for points joined by lines, ",
""h" for histogram, ", ""n" for nothing.")),
mainPanel(
plotOutput("Plot")
)
)
)
server <- function(input, output){
output$Plot <- renderPlot({
plot(x = seq(0,50,1), y=1/x, type=input$types,
main=input$types,
ylab="y",
xlab="x")
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Choose a type:"),
sidebarLayout(
sidebarPanel(
selectInput("types", "Types:", choices=c("p", "l", "b", "o", "h", "n")),
hr(),
helpText("'p' for points, ", "'l' for lines, ", "'b' for points and lines, ", "'o' for points joined by lines, ",
"'h' for histogram, ", "'n' for nothing.")),
mainPanel(
plotOutput("Plot")
)
)
)
server <- function(input, output){
output$Plot <- renderPlot({
plot(x = seq(0,50,1), y=1/x, type=input$types,
main=input$types,
ylab="y",
xlab="x")
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Choose a type:"),
sidebarLayout(
sidebarPanel(
selectInput("types", "Types:", choices=c("p", "l", "b", "o", "h", "n")),
hr(),
helpText("'p' for points, ", "'l' for lines, ", "'b' for points and lines, ", "'o' for points joined by lines, ",
"'h' for histogram, ", "'n' for nothing.")),
mainPanel(
plotOutput("Plot")
)
)
)
server <- function(input, output){
output$Plot <- renderPlot({
plot(x = seq(0,50,1), y=1/x, type=input$types,
ylab="y",
xlab="x")
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Choose a type:"),
sidebarLayout(
sidebarPanel(
selectInput("types", "Types:", choices=c("p", "l", "b", "o", "h", "n")),
hr(),
helpText("'p' for points, ", "'l' for lines, ", "'b' for points and lines, ", "'o' for points joined by lines, ",
"'h' for histogram, ", "'n' for nothing.")),
mainPanel(
plotOutput("Plot")
)
)
)
server <- function(input, output){
output$Plot <- renderPlot({
plot(x = seq(0,50,1), y=1/x, type=input$types,
ylab="y",
xlab="x")
})
}
shinyApp(ui = ui, server = server)
plot(x, main = "Název grafu", xlab = "popis osy x", ylab = "popis osy y",
+    col = c("red", "black", "green"))
plot(x, main = "Název grafu", xlab = "popis osy x", ylab = "popis osy y",
+    col = c("red", "black", "green"))
install.packages(c("flexdashboard", "sp", "dplyr", "tidyr", "plyr", "leaflet"))
render(c("Chapter_1.Rmd", "Chapter_2.Rmd"), output_format = "pdf_document")
library(rmarkdown)
render(c("Chapter_1.Rmd", "Chapter_2.Rmd"), output_format = "pdf_document")
setwd("C:/Users/Irina/Disk Google/1_ČZU/BP/!obsah")
render(c("Chapter_1.Rmd", "Chapter_2.Rmd"), output_format = "pdf_document")
render("Chapter_1.Rmd", "Chapter_2.Rmd", output_format = "pdf_document")
setwd("C:/Users/Irina/Disk Google/1_ČZU/BP/!obsah")
```{r boxplot_kod, eval=FALSE}
boxplot(x)
```{r boxplot_img, fig.align='center', fig.cap="\\label{fig8} Boxplot",out.width= '65%', fig.pos='H', echo=FALSE}
knitr::include_graphics("fig/boxplot.png")
knit_with_parameters('C:/Users/Irina/Disk Google/1_ČZU/BP/!obsah/BP.Rmd')
set.seed(666)
set.seed(666)
x <- rnorm(100, 0, 1)
stem(x)
hist(x)
hist(x, angle = 90)
hist(x, angle = 180)
hist(x, angle = 270)
hist(x, angle = 1)
hist(x, angle = 10)
hist(x, angle = 45)
barplot(x, horiz = TRUE)
barplot(x, horiz = TRUE, axes = FALSE, xlim = c(0, max(x)))
barplot(x, horiz = TRUE, axes = FALSE, xlim = c(0, max(x)), space = 0)
barplot(x, horiz = TRUE, axes = TRUE, xlim = c(0, max(x)), space = 0)
barplot(abs(x), horiz = TRUE, axes = TRUE, xlim = c(0, max(x)), space = 0)
barplot(abs(x), horiz = TRUE)
hist(x, horiz = TRUE)
stem(x)
stem(x)
barplot(x, horiz=TRUE)
barplot(x, ylim = c(-2,2), horiz=TRUE, xlim = c(0,max(x)))
barplot(x, ylim = c(-2,2), horiz=TRUE, xlim = c(0,10))
barplot(x, horiz=TRUE)
stem(x)
install.packages("DiagrammeR")
library(DiagrammeR)
mermaid("
graph LR
A(Problem)
A --> B(Získání dat);
B --> D(Průzkumová analýza dat);
D --> C;
B -->C(Volba modelu);
C -->E(Odhad modelu);
E --> F(Interpretace výsledků);
F --> G(Závěry);
G -->A;
")
install.packages("plotrix")
DiagrammeR::mermaid("
graph LR
A(Problem)
A --> B(Získání dat);
B --> D(Průzkumová analýza dat);
D --> C;
B -->C(Volba modelu);
C -->E(Odhad modelu);
E --> F(Interpretace výsledků);
F --> G(Závěry);
G -->A;
")
1: digraph G {
2: main -> parse -> execute;
3: main -> init;
4: main -> cleanup;
5: execute -> make_string;
6: execute -> printf
7: init -> make_string;
8: main -> printf;
9: execute -> compare;
10: }
1: digraph G {
2: main -> parse -> execute;
3: main -> init;
4: main -> cleanup;
5: execute -> make_string;
6: execute -> printf
7: init -> make_string;
8: main -> printf;
9: execute -> compare;
10: }
